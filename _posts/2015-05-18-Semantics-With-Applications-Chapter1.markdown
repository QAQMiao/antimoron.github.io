--- 
layout: post 
title:  "Semantics With Applications Chapter 1" 
date:   2015-06-24 16:14:00 
categories: technology 
--- 


##写在前面
在文章前面。我要感谢我的妹子给我这样一个翻译这个文章的动力。是她在我之前选择翻译这本书。
我的一切翻译都尊重她的翻译，这是她的链接：<https://blog.csdn.net/miaoaoaoao/article/details/46333595>
由于是本人第一次正式地翻译一些东西，对于有的英文所表述的意思，真的是能看懂但是写不明白。很乐意接受任何翻译上的改进意见。

#Preface 前言
许多正式的语义方面的书通过解释存在三种主要的语义方法，分别是

- 运算语义
- 符号语义，以及
- 公理语义

但是接着他们就继续开展其中之一的语义进行更深入细节的学习。这本书的意图在于:

- 呈现所有的这些语义方法背后的基本思想
- 通过公式推导以及证明相关定理加深他们的联系
- 举例正式语义在计算机科学领域作为一种工具的适用性

这是一个远大的目标，想要实现它，开发的主体致力于```while程序```所用的非常小的核心语言，
针对这种语言三种方法粗略地同等复杂度地开发。为了证明正式语义的适用性我们展示：

- 如何使用语义来确认编程语言的原型实现。
- 如何使用语义来确认在编程语言的高级实现中所使用的分析。
- 如何使用语义来确认有用的程序属性（包括执行时间方面的信息）。

正如标题所说，这种开发是引导性的。出于这个原因在操作、符号和公理语义中
所包含的非常多的高级概念不得不被省略。同样我们不得不省略其他语义的部分
的介绍（例如：Petri-nets和temporal逻辑）。对于想要进行更长远的阅读在第7章
会给出一些其他内容的链接。

![overview]({{site.url}}/assets/semantics-with-apps-resources/Preface-overview.png)

##Overview 总览
正如在上面的依赖关系图里所列举的哪样，章节1、2、4、6、7组成了这本书的核心部分。
章节1介绍了在本书通篇都在用的```while程序```示例语言。在章节2我们涵盖了操作语义的
两个方法：G.Kahn的自然语义以及G.Plotkin的结构化操作语义。章节4主要讲解D.Scott和C.Strachey的符号语义，
包括简单的定点理论。章节6介绍了基于操作语义和符号语义的程序认证，然后紧接着开始根据C.A.R.Hoare呈现
公理语义方法。最终，章节7包含了对于更深入阅读的简易。

在章节2、4、6的前三个或者四个部分中主要是专注于```while程序```并且涵盖说明和理论的方面。在每个章节我们
会用多种其他的概念来拓展```while语言```，并且这些内容的重点相比理论而言更注重说明。在
2.4和2.5小节，我们考虑内容上用中断、不确定性(译者注：多次运行会有随机性结果的。通常结果依赖race condition)、
并行、块构造、动态和静态程序以及非递归与递归程序来拓展。在4.5小节我们考虑用递归或非递归的静态程序来拓展```while语言```，
并且我们展示如何处理异常，即特定类型的跳转。最终在6.4小节我们考虑递归或非递归程序拓展内容，并且展示如何处理正确性属性。
拓展操作语义、符号语义和公理语义的部分可以用任意的顺序来学习。

操作、符号、公理语义在章节3、5、6被列举了，在章节3中我们展示如何用操作语义证明```while语言```的简单编译器的正确性。
在章节5我们用符号语义证明```while语言```的一种分析机制的正确性。最后在6.5小节我们拓展公理方法以便于获取```while程序```的执行时间。

附录A回顾本书所基于的数学符号。大部分是标准不好但是某些人可能注意到非标准符号'->和◇的使用。我们用D→E表示从D到E的局部函数几何。这是因为
我们发现D→E太容易被忽略了。我们也用R◇S表示二进制R和S的合成关系。这是因为对关系和函数所用的不同的合成顺序。
当处理公理语义时我们用公式```{P}S{Q}```来表示局部正确性断言而```{P}S{↓Q}```来表示完全正确性断言，因为显性